steps:
  # Step 1: Build Docker image (includes both frontend and backend)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile'
      - '-t'
      - 'gcr.io/$PROJECT_ID/deep-research-backend:latest'
      - '.'
    id: 'build-backend'

  # Step 2: Push image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/deep-research-backend:latest'
    id: 'push-backend'
    waitFor: ['build-backend']

  # Step 5: Create static IP if it doesn't exist
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute addresses describe deep-research-ip --global --project=$PROJECT_ID >/dev/null 2>&1; then
          echo "Creating static IP address: deep-research-ip"
          gcloud compute addresses create deep-research-ip --global --project=$PROJECT_ID
        else
          echo "Static IP address deep-research-ip already exists"
        fi
    id: 'create-static-ip'
    waitFor: ['push-backend']

  # Step 6: Create namespace first
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'k8s/namespace.yaml'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_GKE_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}'
    id: 'create-namespace'
    waitFor: ['create-static-ip']

  # Step 7: Deploy namespace
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/namespace.yaml']
    env: ['CLOUDSDK_COMPUTE_ZONE=${_GKE_REGION}', 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}']
    id: 'deploy-namespace'
    waitFor: ['create-namespace']

  # Step 8: Deploy Redis and Postgres
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'sed "s/\$${PROJECT_ID}/$PROJECT_ID/g; s/\$${DOMAIN_NAME}/${_DOMAIN_NAME}/g" k8s/redis-postgres.yaml | kubectl apply -f -'
    env: ['CLOUDSDK_COMPUTE_ZONE=${_GKE_REGION}', 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}']
    id: 'deploy-redis-postgres'
    waitFor: ['deploy-namespace']

  # Step 9: Deploy backend config
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'sed "s/\$${PROJECT_ID}/$PROJECT_ID/g; s/\$${DOMAIN_NAME}/${_DOMAIN_NAME}/g" k8s/backend-config.yaml | kubectl apply -f -'
    env: ['CLOUDSDK_COMPUTE_ZONE=${_GKE_REGION}', 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}']
    id: 'deploy-backend-config'
    waitFor: ['deploy-redis-postgres']

  # Step 10: Deploy backend
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'sed "s/\$${PROJECT_ID}/$PROJECT_ID/g; s/\$${DOMAIN_NAME}/${_DOMAIN_NAME}/g" k8s/backend-deployment.yaml | kubectl apply -f -'
    env: ['CLOUDSDK_COMPUTE_ZONE=${_GKE_REGION}', 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}']
    id: 'deploy-backend'
    waitFor: ['deploy-backend-config']

  # Step 11: Deploy static IP and certificate
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'sed "s/\$${PROJECT_ID}/$PROJECT_ID/g; s/\$${DOMAIN_NAME}/${_DOMAIN_NAME}/g" k8s/static-ip-certificate.yaml | kubectl apply -f -'
    env: ['CLOUDSDK_COMPUTE_ZONE=${_GKE_REGION}', 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}']
    id: 'deploy-static-ip-cert'
    waitFor: ['deploy-backend']

  # Step 12: Deploy ingress
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'sed "s/\$${PROJECT_ID}/$PROJECT_ID/g; s/\$${DOMAIN_NAME}/${_DOMAIN_NAME}/g" k8s/ingress.yaml | kubectl apply -f -'
    env: ['CLOUDSDK_COMPUTE_ZONE=${_GKE_REGION}', 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}']
    id: 'deploy-ingress'
    waitFor: ['deploy-static-ip-cert']

  # Step 13: Restart backend deployment to pull latest image
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'rollout'
      - 'restart'
      - 'deployment/deep-research-backend'
      - '-n'
      - 'deep-research'
    env: ['CLOUDSDK_COMPUTE_ZONE=${_GKE_REGION}', 'CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER_NAME}']
    id: 'restart-backend'
    waitFor: ['deploy-ingress']


substitutions:
  _GKE_CLUSTER_NAME: 'next-demo-cluster'
  _GKE_ZONE: 'us-central1-a'
  _GKE_REGION: 'us-central1'
  _DOMAIN_NAME: 'deep-research.maoye.demo.altostrat.com'

options:
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'


# Build timeout (increased for large model downloads)
timeout: '1200s'

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/deep-research-backend:latest'

# Grant permissions to Cloud Build service account
# This needs to be done manually or via terraform:
# - roles/container.developer (push to GCR)
# - roles/container.clusterAdmin (deploy to GKE)
# - roles/compute.instanceAdmin (manage GCE instances)
# - roles/iam.serviceAccountUser (use service accounts)
#
# Note: Before running this build, make sure to create secrets first
# by running the setup-gke-secrets.sh script with your API keys